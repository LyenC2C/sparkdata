#coding:utf-8
__author__ = 'zlj'
import sys

reload(sys)
sys.setdefaultencoding('utf8')

from sklearn.mixture import GMM
from matplotlib.pyplot import *
import numpy as np

try:
    import cPickle as pickle
except:
    import pickle

# with open('/path/to/kde.pickle') as f:  # open the data file provided above
#     kde = pickle.load(f)
# kde=[0, 0, 0, 0, 0, 4, 7, 14, 20, 20, 12, 3, 6, 12, 18, 18, 12, 6, 9, 14, 15, 16, 18, 18, 8, 8, 15, 22, 9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 6, 8, 11, 12, 19, 20, 18, 18, 19, 23, 20, 17, 13, 10, 13, 15, 15, 12, 6, 7, 7, 8, 3, 0, 2, 2, 5, 14, 19, 18, 15, 7, 9, 8, 13, 17, 14, 12, 8, 12, 13, 12, 11, 6, 7, 7, 5, 6, 5, 3, 2, 2, 0, 0, 2, 5, 6, 8, 10, 8, 6, 7, 7, 9, 15, 16, 16, 12, 8, 7, 8, 18, 19, 16, 8, 6, 5, 4, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 19, 22, 14, 2, 3, 4, 3, 4, 3, 2, 2, 2, 0, 0, 0]
# kde=[0, 0, 0, 3, 23, 25, 4, 0, 4, 10, 12, 8, 4, 8, 9, 2, 0, 0, 7, 22, 22, 6, 0, 2, 7, 7, 3, 0, 2, 0, 2, 4, 5, 6, 12, 19, 21, 22, 17, 19, 25, 27, 17, 10, 15, 18, 16, 14, 11, 11, 15, 16, 7, 2, 0, 0, 0, 0, 0, 2, 3, 10, 15, 15, 11, 7, 10, 9, 13, 11, 13, 20, 22, 26, 23, 19, 17, 9, 12, 10, 10, 8, 5, 6, 5, 0, 0, 3, 7, 8, 8, 7, 9, 8, 10, 12, 12, 16, 15, 15, 11, 8, 10, 19, 22, 19, 12, 9, 10, 10, 6, 4, 4, 4, 4, 2, 2, 3, 3, 3, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 3, 3, 5, 11, 20, 21, 13, 3, 0, 0, 2, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0]
kde=[0, 0, 0, 3, 23, 25, 4, 0, 4, 10, 12, 8, 4, 8, 9, 2, 0, 0, 7, 22, 22, 6, 0, 2, 7, 7, 3, 0, 2, 0, 2, 4, 5, 6, 12, 19, 21, 22, 17, 19, 25, 27, 17, 10, 15, 18, 16, 14, 11, 11, 15, 16, 7, 2, 0, 0, 0, 0, 0, 2, 3, 10, 15, 15, 11, 7, 10, 9, 13, 11, 13, 20, 22, 26, 23, 19, 17, 9, 12, 10, 10, 8, 5, 6, 5, 0, 0, 3, 7, 8, 8, 7, 9, 8, 10, 12, 12, 16, 15, 15, 11, 8, 10, 19, 22, 19, 12, 9, 10, 10, 6, 4, 4, 4, 4, 2, 2, 3, 3, 3, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 3, 3, 5, 11, 20, 21, 13, 3, 0, 0, 2, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0]
# obs = np.concatenate((np.random.randn(100, 1),  10 + np.random.randn(300, 1)))
ss=[]
for i,v in enumerate(kde):
    # v = 20 if v>20 else v
    ss.append([i*1.0,v])

# gmm = GMM(n_components=5,covariance_type='full')
# gmm = GMM(n_components=5,covariance_type='spherical',min_covar=1e-12)
gmm = GMM(n_components=5,covariance_type='full',min_covar=1e-12)
gmm.fit(ss)

x = np.linspace(np.min(ss), np.max(ss), len(ss))

print gmm.n_components,gmm.weights_,gmm.covars_

for i in ss:
    print gmm.predict(i)
